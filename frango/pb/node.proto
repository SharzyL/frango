syntax = "proto3";

package frango;

message Empty {}

message PingResp {
    int32 id = 1;
    optional int32 leader_id = 2;
}

message RRaftMessage {
    // avoid using name `bytes` which conflicts with python keyword
    bytes the_bytes = 1;
}

message QueryReq {
    string query_str = 1;
    string params_json = 2;
}

message QueryResp {
    optional string err_msg = 1;  // None implies success
    repeated string header = 2;
    repeated string rows_in_json = 3;
    bool is_valid = 4;
    bool is_error = 5;
}

message SubQueryCompleteReq {
    enum Action {
        COMMIT = 0;
        ABORT = 1;
    };
    Action action = 1;
}

service FrangoNode {
    rpc Ping (Empty) returns (PingResp);
    rpc RRaft (RRaftMessage) returns (Empty);
    rpc Query (QueryReq) returns (QueryResp);

    // used for internode communication
    rpc SubQuery (QueryReq) returns (QueryResp);
    rpc SubQueryComplete (SubQueryCompleteReq) returns (Empty);
}